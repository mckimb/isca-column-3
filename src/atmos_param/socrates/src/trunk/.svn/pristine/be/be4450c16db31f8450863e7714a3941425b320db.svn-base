The following programs can be used to generate input data for the radiance and two-stream code. As in the previous chapter the names of the Fortran programs are listed. Man pages for the corresponding scripts (where available) are then provided. 

\begin{description}

\item[{\tt raw\_input}]
: This is a possibly convenient way of making CDL-files specifying the
atmospheric state. We first need an input file. The input file
contains a number of {\sl profiles} beginning and ending with the
directives {\tt *PROFILE} and {\tt *END} (see {\tt examples/prsc/input}).
After the directive {\tt *PROFILE},
a line listing the variables to be supplied in that profile followed
by the appropriate unit in brackets follows. {\tt NONE} is often used
for dimensionless quantities, such as mass mixing ratios. After this
line the numerical values follow in their correct columns, though the
vertical order is not important: the program will sort the lines
itself. The headers for the columns and the units are in the file
{\tt src/modules\_gen/input\_head\_pcf.f90}. The program requests a
{\sl basename} which
is used to construct output files. The name of the output file consists
of the basename, followed by an underscore, followed by the number of
the profile, followed by a dot and finally by a suffix identifying the
contents, as also defined in {\tt input\_head\_pcf.f90}.
Each profile must
contain the same number of vertical levels, so we would require separate
profiles for the surface data and the atmospheric levels, as in the example.
In the present context you can say yea or nay to the removal of missing
data as there won't be any.

\item[{\tt prep\_opt\_profile}]
: Initially at least, it is likely that the code will be run with specified
profiles of optical properties, rather than with parameterisations of
these properties, so a program is required to take the optical properties
on given levels and format them for input. Averaged scattering properties
must therefore be generated on a number of atmospheric levels using the
preprocessing programs described in the previous chapter. A file is then
set up containing on each line a pressure
level and the name of a file of averaged scattering properties.
{\tt prep\_opt\_profile} takes in this file , the latitude and longitude of
the point and writes a CDL file containing the reformatted data.
This program has not been extended to work for multiple points, but there is
an IDL/python routine available ({\tt ncout\_opt\_prop} for creating
multicolumn netCDF files of prescribed optical properties.

\item[{\tt interp}, {\tt interp\_cdf}]
: Interpolate a field to the pressure levels given by a grid-file. Input
files can be in CDL or netCDF format. The variable found in the grid-file
will not matter as only the pressure levels will be used. The type of 
interpolation must be specified from 1 of 8 options.

A man page for Cinterp is provided.

\item[{\tt samson2cdl}]
: This program generates {\sc CDL}-files from {\sc SAMSON}-files. Again we
describe the script
\begin{verbatim}
Csamson2cdl -o new.t -u "K" -n ta -l "TEMPERATURE" old.t
\end{verbatim}
Here we have a {\sc SAMSON}-file, {\tt old.t} which is converted to a
{\sc CDL}-file {\tt new.t}. We need to specify a unit {\bf -u} and a
{\sl long-name} {\bf -l}: quotes are required if there are spaces in
the strings, but are optional otherwise. A name is required for the array.
Normally, this is the same as the suffix, but the use of {\tt ta} for
temperature seems standard with {\sc CDL}-files, so in this case I have
followed the convention.

\item[{\tt cdl2cdf}]
: Converts CDL input files to netCDF. The script has two modes of operation as outlined  below.  Either  a  single file can be converted, or all files with a given basename.

\smallskip

{\tt Ccdl2cdf [-o} {\em output-file}{\tt ]} {\em input-file}

{\tt Ccdl2cdf -a} {\em basename}

\smallskip

This program will convert files that are readable by {\tt l\_run\_cdl} where the generic routine, {\tt ncgen}, may not work.

\item[{\tt cdf2cdl}]
: Converts netCDF input files to CDL. The options for the script, {\tt Ccdf2cdl}, are the same as for {\tt Ccdl2cdf}. Man pages are available for both of these scripts.

\end{description}

Man pages follow formatted using {\tt man -t}.

\includepdf[pages=-]{Cinterp.pdf}
\includepdf[pages=-]{Ccdl2cdf.pdf}
\includepdf[pages=-]{Ccdf2cdl.pdf}

\section{Creating multicolumn netCDF input files}

A number of IDL and python utilities are available to create netCDF files in the required format from arrays of data. These can be found in {\tt \$RAD\_DIR/idl/} and {\tt \$RAD\_DIR/python/}. At present, the following routines are available:

\begin{description}

\item[{\tt ncout\_surf} (in {\tt nctools})] : Program to create netCDF files of surface albedo weights. This can be called within IDL with the syntax:

\begin{verbatim}
ncout_surf, file, lon, lat, basis, alb
\end{verbatim}

Normally 'file' will have the extension .surf, and 'basis' = 1.
'alb' should then be an array of surface albedo values or a single value.

\item[{\tt ncout\_spectral\_surf} (in {\tt nctools})] : Program to create netCDF files of surface albedos per band. Called with the syntax:

\begin{verbatim}
ncout_spectral_surf, file, lon, lat, bands, alb
\end{verbatim}

Normally 'file' will have the extension .surf. 'bands' is the number bands.
'alb' should then be an array of surface albedo values for the bands.

\item[{\tt ncout2d} (in {\tt nctools})] : Program to create netCDF files of single level fields. Called with the syntax:

\begin{verbatim}
ncout2d, file, lon, lat, val, $
           name=name, longname=longname, units=units
\end{verbatim}

For example, to create a file of solar irradiance:

\begin{verbatim}
ncout2d, 'out.stoa', lon, lat, [1365.0], $
           longname='Solar Irradiance', units='WM-2'
\end{verbatim}

where lon and lat are arrays (the optional argument 'name' is missing here and will be set from the file extension, i.e. name='stoa').

\item[{\tt ncout3d} (in {\tt nctools})] : Program to create netCDF files of 3d fields on pressure levels. Called with the syntax:

\begin{verbatim}
ncout3d, file, lon, lat, p, val, $
           name=name, longname=longname, units=units
\end{verbatim}

For example, to create a temperature file:

\begin{verbatim}
ncout3d, 'out.t', lon, lat, p, t, $
           longname='Temperature', units='K'
\end{verbatim}

where lon, lat, p, and t are arrays (the optional argument 'name' is missed out as before and will be set from the file extension, i.e. name='t').

\item[{\tt ncout\_opt\_prop} (in {\tt nctools})] : Program to create netCDF files of prescribed optical properties on pressure levels. Called with the syntax:

\begin{verbatim}
ncout_opt_prop, file, lon, lat, p, bands, absp, scat, phf
\end{verbatim}

For example:

\begin{verbatim}
ncout_opt_prop, 'out.op_soot', lon, lat, p, 6, absp, scat, phf
\end{verbatim}

where lon, lat, p, absp, scat and phf are arrays.

\item[{\tt ncout\_view} (in {\tt nctools})] : Program to create netCDF ".view" files. Called with the syntax:

\begin{verbatim}
ncout_view, file, lon, lat, direction, level, pol, azim, rlev
\end{verbatim}

\item[{\tt ncout\_tl}] : Program to create netCDF file of temperature on levels (.tl file). This is extrapolated from the temperature in layers (.t file), and the surface temperature (.tstar) if available. Called with the syntax:

\begin{verbatim}
ncout_tl, basename
\end{verbatim}

where basename is the file name of the temperature file without the suffix, e.g. {\tt 'out'}.

\item[{\tt ncprofiles}] : Creates many of the files needed by the radiation code using standard default values. This script uses a template file (.t by default) to define lon, lat, and p and then calls the above routines with given values. These should be edited as required. The calling syntax is:

\begin{verbatim}
ncprofiles, basename
\end{verbatim}

\item[{\tt ncplot}] : Plots a mean profile of the variable in the supplied file against height (calculated from pressure assuming an isothermal atmosphere). Called with the syntax:

\begin{verbatim}
ncplot, file
\end{verbatim}

\end{description}

Input and output netCDF files can be modified using standard netCDF utilities, and viewed using, for example, {\tt ncview}.
